FIFO和Unix Domain Socket这两种IPC机制都是利用文件系统中的特殊文件来标识的。可以用mkfifo命令创建一个FIFO文件：

$ mkfifo hello
$ ls -l hello
prw-r--r-- 1 djkings djkings 0 2008-10-30 10:44 hello

FIFO文件在磁盘上没有数据块，仅用来标识内核中的一条通道，各进程可以打开这个文件进行read/write，实际上是在读写内核通道（根本原因在于这个file结构体所指向的read、write函数和常规文件不一样），这样就实现了进程间通信。Unix Domain Socket和FIFO的原理类似，也需要一个特殊的socket文件来标识内核中的通道，例如/var/run目录下有很多系统服务的socket文件：

$ ls -l /var/run/
total 52
srw-rw-rw- 1 root        root           0 2008-10-30 00:24 acpid.socket
......
srw-rw-rw- 1 root        root           0 2008-10-30 00:25 gdm_socket
......
srw-rw-rw- 1 root        root           0 2008-10-30 00:24 sdp
......
srwxr-xr-x 1 root        root           0 2008-10-30 00:42 synaptic.socket

文件类型s表示socket，这些文件在磁盘上也没有数据块。UNIX Domain Socket是目前最广泛使用的IPC机制，到后面讲socket编程时再详细介绍。

现在把进程之间传递信息的各种途径（包括各种IPC机制）总结如下：

    父进程通过fork可以将打开文件的描述符传递给子进程

    子进程结束时，父进程调用wait可以得到子进程的终止信息

    几个进程可以在文件系统中读写某个共享文件，也可以通过给文件加锁来实现进程间同步

    进程之间互发信号，一般使用SIGUSR1和SIGUSR2实现用户自定义功能

    管道

    FIFO

    mmap函数，几个进程可以映射同一内存区

    SYS V IPC，以前的SYS V UNIX系统实现的IPC机制，包括消息队列、信号量和共享内存，现在已经基本废弃

    UNIX Domain Socket，目前最广泛使用的IPC机制
